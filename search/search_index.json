{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 This project provides set of utilities to generate, render, and other kind of stuff with mazes. Following are some mazes generated: Usage \u00b6 As mentioned early, these are just some set of utilizes which means that they can be hacked to do anything you like. The typical flow of generating a maze looks something as following: Javascript \u00b6 First, you need to install the mazes101 package using npm, yarn or alternatively you can also load umd modules from CDN: NPM npm i mazes101 --save Yarn yarn add mazes101 CDN <!-- DON'T FORGET to replace x.x.x we appropriate version Check all the release here: https://github.com/nmanumr/mazes101/releases --> < script src = \"https://cdn.jsdelivr.net/npm/mazes101@x.x.x/index.umd.js\" ></ script > < script > // here mazes101 is available in global scope </ script > Then, the package can be used to generate the mazes as following: 1 2 3 4 5 6 7 import * as Rectangular from 'mazes101/boards/rectangular' ; import { generate } from 'mazes101/generators/backtrack' ; import { render } from 'mazes101/renderers/rectangularSvg' ; let board = Rectangular . newBoard ({ height : 20 , width : 20 }); board = generate ( board , Rectangular ); const svgString = render ( board ); Note The generate method returns a new board instead of altering the provided board so, it is important to assign that board somewhere. This is true for all the functions in Mazes101, they don't have side effects instead they return the changed value. Deno \u00b6 The deno package is not yet published to deno.land/x but you can use import_map.json file to map mazes101 package name to github. index.ts import mazes101 from 'mazes101' ; import_map.json { \"imports\" : { \"mazes101/\" : \"https://raw.githubusercontent.com/nmanumr/mazes101/deno/\" } } To run the script use: deno run --import-map = import_map.json index.ts Status \u00b6 The project is still under development and therefore contributions are welcomed here is the Status of the project: Boards Rectangular Board Weave Board Circular Board Trinagular Board Hexagonal Board Generators Aldous Broder Backtrack Eller Kruskal Prim Sidewinder Wilson Renderers SVG Canvas I'm also thinking to port the code base to other languages, current Python & Dart are in my wishlist so any contributions on porting are also welcomed.","title":"Home"},{"location":"#home","text":"This project provides set of utilities to generate, render, and other kind of stuff with mazes. Following are some mazes generated:","title":"Home"},{"location":"#usage","text":"As mentioned early, these are just some set of utilizes which means that they can be hacked to do anything you like. The typical flow of generating a maze looks something as following:","title":"Usage"},{"location":"#javascript","text":"First, you need to install the mazes101 package using npm, yarn or alternatively you can also load umd modules from CDN: NPM npm i mazes101 --save Yarn yarn add mazes101 CDN <!-- DON'T FORGET to replace x.x.x we appropriate version Check all the release here: https://github.com/nmanumr/mazes101/releases --> < script src = \"https://cdn.jsdelivr.net/npm/mazes101@x.x.x/index.umd.js\" ></ script > < script > // here mazes101 is available in global scope </ script > Then, the package can be used to generate the mazes as following: 1 2 3 4 5 6 7 import * as Rectangular from 'mazes101/boards/rectangular' ; import { generate } from 'mazes101/generators/backtrack' ; import { render } from 'mazes101/renderers/rectangularSvg' ; let board = Rectangular . newBoard ({ height : 20 , width : 20 }); board = generate ( board , Rectangular ); const svgString = render ( board ); Note The generate method returns a new board instead of altering the provided board so, it is important to assign that board somewhere. This is true for all the functions in Mazes101, they don't have side effects instead they return the changed value.","title":"Javascript"},{"location":"#deno","text":"The deno package is not yet published to deno.land/x but you can use import_map.json file to map mazes101 package name to github. index.ts import mazes101 from 'mazes101' ; import_map.json { \"imports\" : { \"mazes101/\" : \"https://raw.githubusercontent.com/nmanumr/mazes101/deno/\" } } To run the script use: deno run --import-map = import_map.json index.ts","title":"Deno"},{"location":"#status","text":"The project is still under development and therefore contributions are welcomed here is the Status of the project: Boards Rectangular Board Weave Board Circular Board Trinagular Board Hexagonal Board Generators Aldous Broder Backtrack Eller Kruskal Prim Sidewinder Wilson Renderers SVG Canvas I'm also thinking to port the code base to other languages, current Python & Dart are in my wishlist so any contributions on porting are also welcomed.","title":"Status"},{"location":"boards/","text":"Boards \u00b6 At the very core each board is just a Uint8Array where each element represents a cell. A single cell has information weather it is enabled or not and wall in different directions. A board in just a view on top if this Uint8Array which basically just defines the neighbourhood of each cell. Each board needs to have following 3 functions: getNeighbours : get neighbour cell indexes at given index. removeInterWall : remove wall between two cell indexes getRows : get array of rows of cell indexes Built-in Boards \u00b6 Mazes101 comes with following builtin boards: Rectangular Board Weave Board Circular Board Hexagonal Board ( coming soon... ) Triangular Board ( coming soon... ) Custom Boards \u00b6 Adding a support for any other board type is also not that difficult. See Custom Boards fore more details.","title":"Overview"},{"location":"boards/#boards","text":"At the very core each board is just a Uint8Array where each element represents a cell. A single cell has information weather it is enabled or not and wall in different directions. A board in just a view on top if this Uint8Array which basically just defines the neighbourhood of each cell. Each board needs to have following 3 functions: getNeighbours : get neighbour cell indexes at given index. removeInterWall : remove wall between two cell indexes getRows : get array of rows of cell indexes","title":"Boards"},{"location":"boards/#built-in-boards","text":"Mazes101 comes with following builtin boards: Rectangular Board Weave Board Circular Board Hexagonal Board ( coming soon... ) Triangular Board ( coming soon... )","title":"Built-in Boards"},{"location":"boards/#custom-boards","text":"Adding a support for any other board type is also not that difficult. See Custom Boards fore more details.","title":"Custom Boards"},{"location":"boards/circular/","text":"Circular Board \u00b6 Usage \u00b6 New Board import { newBoard } from 'mazes101/boards/circular' ; let board = newBoard ({ radius : 7 }); From existing base board import { newFromBaseBoard } from 'mazes101/boards/circular' ; let board = newFromBaseBoard ( baseBoard , { radius : 7 }); Anatomy \u00b6 Size Parameters \u00b6 Source A rectangular board has two size parameters: radius : Its innerRadius Position \u00b6 Source Position of each cell is represented by polar coordinates where: r is rth row from center, starts from first visible row t is nth cell in rth row Directions \u00b6 Source Each cell in a rectangular board utilizes 4 directions as following: Top clockwise (mask: 0b00001 or 1 ) Top counter-clockwise (mask: 0b00010 or 2 ) Right (mask: 0b00100 or 4 ) Bottom (mask: 0b01000 or 8 ) Left (mask: 0b10000 or 16 ) If there is only one top cell it will be considered in top clockwise direction.","title":"Circular Board"},{"location":"boards/circular/#circular-board","text":"","title":"Circular Board"},{"location":"boards/circular/#usage","text":"New Board import { newBoard } from 'mazes101/boards/circular' ; let board = newBoard ({ radius : 7 }); From existing base board import { newFromBaseBoard } from 'mazes101/boards/circular' ; let board = newFromBaseBoard ( baseBoard , { radius : 7 });","title":"Usage"},{"location":"boards/circular/#anatomy","text":"","title":"Anatomy"},{"location":"boards/circular/#size-parameters","text":"Source A rectangular board has two size parameters: radius : Its innerRadius","title":"Size Parameters"},{"location":"boards/circular/#position","text":"Source Position of each cell is represented by polar coordinates where: r is rth row from center, starts from first visible row t is nth cell in rth row","title":"Position"},{"location":"boards/circular/#directions","text":"Source Each cell in a rectangular board utilizes 4 directions as following: Top clockwise (mask: 0b00001 or 1 ) Top counter-clockwise (mask: 0b00010 or 2 ) Right (mask: 0b00100 or 4 ) Bottom (mask: 0b01000 or 8 ) Left (mask: 0b10000 or 16 ) If there is only one top cell it will be considered in top clockwise direction.","title":"Directions"},{"location":"boards/rectangular/","text":"Rectangular Board \u00b6 Usage \u00b6 New Board \u00b6 import { newBoard } from 'mazes101/boards/rectangular' ; let board = newBoard ({ height : 20 , width : 20 }); newBoard method takes only one argument: size : size of the board Anatomy \u00b6 Bits: 2 3 4 1 5 6 7 8 Val: 0 0 0 0 0 1 1 1 W:10 H:10 X: Y: 8 1 In the figure above we have a rectangular board with: size parameters { width : 10 , height : 10 } , a highlighted cell at position { x : 8 , y : 1 } the highlighted cell has value 0000 0111 which means its enabled (hence 0 at 1st bit) and has 3 walls removed top, right, bottom (hence 1 at 6, 7 and 8th bits). Size Parameters \u00b6 Source A rectangular board has two size parameters: width : width of board as number of cells height : height of board as number of cells Position \u00b6 Source Position of each cell is represented by cartesian coordinates ( X and Y values). Directions \u00b6 Source Each cell in a rectangular board utilizes 4 directions as following: Top (mask: 0b0001 or 1 ) Right (mask: 0b0010 or 2 ) Bottom (mask: 0b0100 or 4 ) Left (mask: 0b1000 or 8 )","title":"Rectangular Board"},{"location":"boards/rectangular/#rectangular-board","text":"","title":"Rectangular Board"},{"location":"boards/rectangular/#usage","text":"","title":"Usage"},{"location":"boards/rectangular/#new-board","text":"import { newBoard } from 'mazes101/boards/rectangular' ; let board = newBoard ({ height : 20 , width : 20 }); newBoard method takes only one argument: size : size of the board","title":"New Board"},{"location":"boards/rectangular/#anatomy","text":"Bits: 2 3 4 1 5 6 7 8 Val: 0 0 0 0 0 1 1 1 W:10 H:10 X: Y: 8 1 In the figure above we have a rectangular board with: size parameters { width : 10 , height : 10 } , a highlighted cell at position { x : 8 , y : 1 } the highlighted cell has value 0000 0111 which means its enabled (hence 0 at 1st bit) and has 3 walls removed top, right, bottom (hence 1 at 6, 7 and 8th bits).","title":"Anatomy"},{"location":"boards/rectangular/#size-parameters","text":"Source A rectangular board has two size parameters: width : width of board as number of cells height : height of board as number of cells","title":"Size Parameters"},{"location":"boards/rectangular/#position","text":"Source Position of each cell is represented by cartesian coordinates ( X and Y values).","title":"Position"},{"location":"boards/rectangular/#directions","text":"Source Each cell in a rectangular board utilizes 4 directions as following: Top (mask: 0b0001 or 1 ) Right (mask: 0b0010 or 2 ) Bottom (mask: 0b0100 or 4 ) Left (mask: 0b1000 or 8 )","title":"Directions"},{"location":"boards/weave/","text":"Weave Board \u00b6 Weave boards are extended from rectangular board with only one function overridden getNeighbours which can look for next neighbour if immediate neighbour is a passage. The only limitation is that it can only look fore one next neighbour not multiples. Usage \u00b6 New Board \u00b6 import { newBoard } from 'mazes101/boards/weave' ; let board = newBoard ({ height : 20 , width : 20 }); newBoard method takes only one argument: size : size of the board Anatomy \u00b6 Bits: 2 3 4 1 5 6 7 8 Val: 0 0 0 0 0 1 1 0 W:10 H:10 X: Y: 8 1 In the figure above we have a rectangular board with: size parameters { width : 10 , height : 10 } , a highlighted cell at position { x : 8 , y : 1 } the highlighted cell has value 0000 0111 which means its enabled (hence 0 at 1st bit) and has 3 walls removed top, right, bottom (hence 1 at 6, 7 and 8th bits). Size Parameters \u00b6 Source A rectangular board has two size parameters: width : width of board as number of cells height : height of board as number of cells Position \u00b6 Source Position of each cell is represented by cartesian coordinates ( X and Y values). Directions \u00b6 Source Each cell in a rectangular board utilizes 4 directions as following: Top (mask: 0b0001 or 1 ) Right (mask: 0b0010 or 2 ) Bottom (mask: 0b0100 or 4 ) Left (mask: 0b1000 or 8 )","title":"Weave Board"},{"location":"boards/weave/#weave-board","text":"Weave boards are extended from rectangular board with only one function overridden getNeighbours which can look for next neighbour if immediate neighbour is a passage. The only limitation is that it can only look fore one next neighbour not multiples.","title":"Weave Board"},{"location":"boards/weave/#usage","text":"","title":"Usage"},{"location":"boards/weave/#new-board","text":"import { newBoard } from 'mazes101/boards/weave' ; let board = newBoard ({ height : 20 , width : 20 }); newBoard method takes only one argument: size : size of the board","title":"New Board"},{"location":"boards/weave/#anatomy","text":"Bits: 2 3 4 1 5 6 7 8 Val: 0 0 0 0 0 1 1 0 W:10 H:10 X: Y: 8 1 In the figure above we have a rectangular board with: size parameters { width : 10 , height : 10 } , a highlighted cell at position { x : 8 , y : 1 } the highlighted cell has value 0000 0111 which means its enabled (hence 0 at 1st bit) and has 3 walls removed top, right, bottom (hence 1 at 6, 7 and 8th bits).","title":"Anatomy"},{"location":"boards/weave/#size-parameters","text":"Source A rectangular board has two size parameters: width : width of board as number of cells height : height of board as number of cells","title":"Size Parameters"},{"location":"boards/weave/#position","text":"Source Position of each cell is represented by cartesian coordinates ( X and Y values).","title":"Position"},{"location":"boards/weave/#directions","text":"Source Each cell in a rectangular board utilizes 4 directions as following: Top (mask: 0b0001 or 1 ) Right (mask: 0b0010 or 2 ) Bottom (mask: 0b0100 or 4 ) Left (mask: 0b1000 or 8 )","title":"Directions"},{"location":"generators/","text":"Generators \u00b6 Generators are some algorithms that can be applied to some generic board, and they return a maze generated in that board. Not all the algorithms are equal, every algorithm have some pros and cons. Some have some specific features others are good in some specific situation. Following are some generators built-in mazes101: Aldous Broder Eller Kruskal Prim Sidewinder From all these algorithms Kruskal , Prim , and Backtrack are the ones that I personally like. References \u00b6 Each generator generally exports following two members: _required_fns : string [] A list of all the function required by the algorithms. generate ( board : Board , fns : RequiredFunctions ) : Board A function which, when called with board and required function will return a board with maze generated in it. Common required functions \u00b6 Typically, each function required following few functions only. So, I you are implementing a custom board you basically, need to implement these functions only. getRows ( board : Board ) : number [][] Returns array of set of cell indexes in a row. This should also not include disabled cells. getNeighbours ( index : number , board : Board ) : number [] Get indexes of cells neighbour to the given index . This shouldn't include disabled cells. removeInterWall ( index1 : number , index2 : number , board : Board ) : Board Remove wall between given two cells index1 and index2 . The function should return a board with walls between both cells removed.","title":"Overview"},{"location":"generators/#generators","text":"Generators are some algorithms that can be applied to some generic board, and they return a maze generated in that board. Not all the algorithms are equal, every algorithm have some pros and cons. Some have some specific features others are good in some specific situation. Following are some generators built-in mazes101: Aldous Broder Eller Kruskal Prim Sidewinder From all these algorithms Kruskal , Prim , and Backtrack are the ones that I personally like.","title":"Generators"},{"location":"generators/#references","text":"Each generator generally exports following two members: _required_fns : string [] A list of all the function required by the algorithms. generate ( board : Board , fns : RequiredFunctions ) : Board A function which, when called with board and required function will return a board with maze generated in it.","title":"References"},{"location":"generators/#common-required-functions","text":"Typically, each function required following few functions only. So, I you are implementing a custom board you basically, need to implement these functions only. getRows ( board : Board ) : number [][] Returns array of set of cell indexes in a row. This should also not include disabled cells. getNeighbours ( index : number , board : Board ) : number [] Get indexes of cells neighbour to the given index . This shouldn't include disabled cells. removeInterWall ( index1 : number , index2 : number , board : Board ) : Board Remove wall between given two cells index1 and index2 . The function should return a board with walls between both cells removed.","title":"Common required functions"},{"location":"generators/aldousBroder/","text":"Aldous Broder \u00b6 Source Warning Aldous Broder's algorithm guarantees to generate unbiased mazes but there is no guarantee that this algorithm will not be stuck in an infinite loop. So its recommended not to use this algorithm unless you really known what you are really doing. Starts at an arbitrary location in the grid, move randomly from cell to cell. If moving to a previously unvisited cell, carve a passage to it. End when all cells have been visited. Typical features \u00b6 Starts quickly but can take a very long time to finish. Significantly, it is unbiased, meaning it is guaranteed to generate mazes perfectly randomly, without preference to any particular texture or feature. Usage \u00b6 import { generate } from 'mazes101/generators/aldousBroder' ; board = generate ( board , { getNextRowNeighbours , removeInterWall }); Required Functions \u00b6 getNeighbours ( index : number , board : Board ) : number [] Get indexes of cells neighbour to the given index . This shouldn't include disabled cells. removeInterWall ( index1 : number , index2 : number , board : Board ) : Board Remove wall between given two cells index1 and index2 . The function should return a board with walls between both cells removed.","title":"Aldous Broder"},{"location":"generators/aldousBroder/#aldous-broder","text":"Source Warning Aldous Broder's algorithm guarantees to generate unbiased mazes but there is no guarantee that this algorithm will not be stuck in an infinite loop. So its recommended not to use this algorithm unless you really known what you are really doing. Starts at an arbitrary location in the grid, move randomly from cell to cell. If moving to a previously unvisited cell, carve a passage to it. End when all cells have been visited.","title":"Aldous Broder"},{"location":"generators/aldousBroder/#typical-features","text":"Starts quickly but can take a very long time to finish. Significantly, it is unbiased, meaning it is guaranteed to generate mazes perfectly randomly, without preference to any particular texture or feature.","title":"Typical features"},{"location":"generators/aldousBroder/#usage","text":"import { generate } from 'mazes101/generators/aldousBroder' ; board = generate ( board , { getNextRowNeighbours , removeInterWall });","title":"Usage"},{"location":"generators/aldousBroder/#required-functions","text":"getNeighbours ( index : number , board : Board ) : number [] Get indexes of cells neighbour to the given index . This shouldn't include disabled cells. removeInterWall ( index1 : number , index2 : number , board : Board ) : Board Remove wall between given two cells index1 and index2 . The function should return a board with walls between both cells removed.","title":"Required Functions"},{"location":"generators/backtrack/","text":"BackTrack \u00b6 Source Usage \u00b6 import { generate } from 'mazes101/generators/backtrack' ; board = generate ( board , { getNextRowNeighbours , removeInterWall }); Required Functions \u00b6 getNeighbours ( index : number , board : Board ) : number [] Get indexes of cells neighbour to the given index . This shouldn't include disabled cells. removeInterWall ( index1 : number , index2 : number , board : Board ) : Board Remove wall between given two cells index1 and index2 . The function should return a board with walls between both cells removed.","title":"Backtrack"},{"location":"generators/backtrack/#backtrack","text":"Source","title":"BackTrack"},{"location":"generators/backtrack/#usage","text":"import { generate } from 'mazes101/generators/backtrack' ; board = generate ( board , { getNextRowNeighbours , removeInterWall });","title":"Usage"},{"location":"generators/backtrack/#required-functions","text":"getNeighbours ( index : number , board : Board ) : number [] Get indexes of cells neighbour to the given index . This shouldn't include disabled cells. removeInterWall ( index1 : number , index2 : number , board : Board ) : Board Remove wall between given two cells index1 and index2 . The function should return a board with walls between both cells removed.","title":"Required Functions"},{"location":"generators/eller/","text":"Eller \u00b6 Source Sequentially, considers a single at a time. Assigns the unvisited cells in the current row to different sets. Randomly links adjacent cells that belong to different sets, merging the sets together as it go. For each remaining set, chooses at least one cell and carve a next row cell, adding that next row cell to the set as well. Repeats for every row in the grid. On the final row, links all adjacent cells that belong to different sets. Typical features \u00b6 Final row tends to have fewer walls as a result of needing to merge multiple sets together. Difficult to use with masks and non-rectangular grids. Usage \u00b6 import { generate } from 'mazes101/generators/eller' ; board = generate ( board , { getRows , getNextRowNeighbours , removeInterWall }); Required Functions \u00b6 getRows ( board : Board ) : number [][] Returns array of set of cell indexes in a row. This should also not include disabled cells. getNeighbours ( index : number , board : Board ) : number [] Get indexes of cells neighbour to the given index . This shouldn't include disabled cells. removeInterWall ( index1 : number , index2 : number , board : Board ) : Board Remove wall between given two cells index1 and index2 . The function should return a board with walls between both cells removed. getFactor ? ( rowIndex : number ) : number ( optional ) Should return a number in range of 0 and 1 (default is 0.5). This function is called on each cell so, you can also return different values based on the row number this will change probability of horizontal passages on each row.","title":"Eller"},{"location":"generators/eller/#eller","text":"Source Sequentially, considers a single at a time. Assigns the unvisited cells in the current row to different sets. Randomly links adjacent cells that belong to different sets, merging the sets together as it go. For each remaining set, chooses at least one cell and carve a next row cell, adding that next row cell to the set as well. Repeats for every row in the grid. On the final row, links all adjacent cells that belong to different sets.","title":"Eller"},{"location":"generators/eller/#typical-features","text":"Final row tends to have fewer walls as a result of needing to merge multiple sets together. Difficult to use with masks and non-rectangular grids.","title":"Typical features"},{"location":"generators/eller/#usage","text":"import { generate } from 'mazes101/generators/eller' ; board = generate ( board , { getRows , getNextRowNeighbours , removeInterWall });","title":"Usage"},{"location":"generators/eller/#required-functions","text":"getRows ( board : Board ) : number [][] Returns array of set of cell indexes in a row. This should also not include disabled cells. getNeighbours ( index : number , board : Board ) : number [] Get indexes of cells neighbour to the given index . This shouldn't include disabled cells. removeInterWall ( index1 : number , index2 : number , board : Board ) : Board Remove wall between given two cells index1 and index2 . The function should return a board with walls between both cells removed. getFactor ? ( rowIndex : number ) : number ( optional ) Should return a number in range of 0 and 1 (default is 0.5). This function is called on each cell so, you can also return different values based on the row number this will change probability of horizontal passages on each row.","title":"Required Functions"},{"location":"generators/kruskal/","text":"Kruskal \u00b6 Source Begins by assigning each cell to a different set. Randomly links two adjacent cells, but only if they belong to different sets. Merges the sets of the two cells. Repeats until only a single set remains. Typical features \u00b6 Largely unbiased. Produces very regular, uniform mazes. Excels at producing mazes that are the union of disjoint subsets, where the grid is prepopulated with some cells already connected in different areas. Usage \u00b6 import { generate } from 'mazes101/generators/kruskal' ; board = generate ( board , { getNextRowNeighbours , removeInterWall }); Required Functions \u00b6 getNeighbours ( index : number , board : Board ) : number [] Get indexes of cells neighbour to the given index . This shouldn't include disabled cells. removeInterWall ( index1 : number , index2 : number , board : Board ) : Board Remove wall between given two cells index1 and index2 . The function should return a board with walls between both cells removed.","title":"Kruskal"},{"location":"generators/kruskal/#kruskal","text":"Source Begins by assigning each cell to a different set. Randomly links two adjacent cells, but only if they belong to different sets. Merges the sets of the two cells. Repeats until only a single set remains.","title":"Kruskal"},{"location":"generators/kruskal/#typical-features","text":"Largely unbiased. Produces very regular, uniform mazes. Excels at producing mazes that are the union of disjoint subsets, where the grid is prepopulated with some cells already connected in different areas.","title":"Typical features"},{"location":"generators/kruskal/#usage","text":"import { generate } from 'mazes101/generators/kruskal' ; board = generate ( board , { getNextRowNeighbours , removeInterWall });","title":"Usage"},{"location":"generators/kruskal/#required-functions","text":"getNeighbours ( index : number , board : Board ) : number [] Get indexes of cells neighbour to the given index . This shouldn't include disabled cells. removeInterWall ( index1 : number , index2 : number , board : Board ) : Board Remove wall between given two cells index1 and index2 . The function should return a board with walls between both cells removed.","title":"Required Functions"},{"location":"generators/prim/","text":"Prim \u00b6 Source Initializes a set with an arbitrary cell. Randomly chooses a cell from the set. If it has no unvisited neighbors, removes it from the set. Otherwise, chooses one of the cell\u2019s unvisited neighbors, links the two together, and adds the neighbor to the set. Repeats until the set is not empty. Typical features \u00b6 A strong radial texture centered on the starting cell. Mazes tend to have more dead ends than other algorithms, and shorter paths. Usage \u00b6 import { generate } from 'mazes101/generators/prim' ; board = generate ( board , { getNextRowNeighbours , removeInterWall }); Required Functions \u00b6 getNeighbours ( index : number , board : Board ) : number [] Get indexes of cells neighbour to the given index . This shouldn't include disabled cells. removeInterWall ( index1 : number , index2 : number , board : Board ) : Board Remove wall between given two cells index1 and index2 . The function should return a board with walls between both cells removed.","title":"Prim"},{"location":"generators/prim/#prim","text":"Source Initializes a set with an arbitrary cell. Randomly chooses a cell from the set. If it has no unvisited neighbors, removes it from the set. Otherwise, chooses one of the cell\u2019s unvisited neighbors, links the two together, and adds the neighbor to the set. Repeats until the set is not empty.","title":"Prim"},{"location":"generators/prim/#typical-features","text":"A strong radial texture centered on the starting cell. Mazes tend to have more dead ends than other algorithms, and shorter paths.","title":"Typical features"},{"location":"generators/prim/#usage","text":"import { generate } from 'mazes101/generators/prim' ; board = generate ( board , { getNextRowNeighbours , removeInterWall });","title":"Usage"},{"location":"generators/prim/#required-functions","text":"getNeighbours ( index : number , board : Board ) : number [] Get indexes of cells neighbour to the given index . This shouldn't include disabled cells. removeInterWall ( index1 : number , index2 : number , board : Board ) : Board Remove wall between given two cells index1 and index2 . The function should return a board with walls between both cells removed.","title":"Required Functions"},{"location":"generators/sidewinder/","text":"Sidewinder \u00b6 Source Sequentially, considers a single at a time. Joins all the cells of first row. For each other row, links random runs of adjacent cells, and then carve a next row cell from a random cell in each run. Typical Features \u00b6 A strong vertical texture. One corridor runs the length of the northern row. Difficult to use with masks and non-rectangular grids. Usage \u00b6 import { generate } from 'mazes101/generators/sidewinder' ; board = generate ( board , { getNextRowNeighbours , removeInterWall }); Required Functions \u00b6 getRows ( board : Board ) : number [][] Returns array of set of cell indexes in a row. This should also not include disabled cells. getNeighbours ( index : number , board : Board ) : number [] Get indexes of cells neighbour to the given index . This shouldn't include disabled cells. removeInterWall ( index1 : number , index2 : number , board : Board ) : Board Remove wall between given two cells index1 and index2 . The function should return a board with walls between both cells removed. getFactor ? ( rowIndex : number ) : number ( optional ) Should return a number in range of 0 and 1 (default is 0.5). This function is called on each cell so, you can also return different values based on the row number this will change probability of horizontal passages on each row.","title":"Sidewinder"},{"location":"generators/sidewinder/#sidewinder","text":"Source Sequentially, considers a single at a time. Joins all the cells of first row. For each other row, links random runs of adjacent cells, and then carve a next row cell from a random cell in each run.","title":"Sidewinder"},{"location":"generators/sidewinder/#typical-features","text":"A strong vertical texture. One corridor runs the length of the northern row. Difficult to use with masks and non-rectangular grids.","title":"Typical Features"},{"location":"generators/sidewinder/#usage","text":"import { generate } from 'mazes101/generators/sidewinder' ; board = generate ( board , { getNextRowNeighbours , removeInterWall });","title":"Usage"},{"location":"generators/sidewinder/#required-functions","text":"getRows ( board : Board ) : number [][] Returns array of set of cell indexes in a row. This should also not include disabled cells. getNeighbours ( index : number , board : Board ) : number [] Get indexes of cells neighbour to the given index . This shouldn't include disabled cells. removeInterWall ( index1 : number , index2 : number , board : Board ) : Board Remove wall between given two cells index1 and index2 . The function should return a board with walls between both cells removed. getFactor ? ( rowIndex : number ) : number ( optional ) Should return a number in range of 0 and 1 (default is 0.5). This function is called on each cell so, you can also return different values based on the row number this will change probability of horizontal passages on each row.","title":"Required Functions"},{"location":"generators/wilson/","text":"Wilson \u00b6 Source Chooses an arbitrary cell and adds it to the maze. Starting from any other cell, performs a loop-erased random walk until encounters a cell belonging to the maze, and then adds the resulting walk. Repeats until all cells have been added. Typical Feature \u00b6 Slow to start but accelerates quickly as paths are added to the maze. As with Aldous-Broder, it is unbiased, meaning it is guaranteed to generate mazes perfectly randomly, without preference to any particular texture or feature. Usage \u00b6 import { generate } from 'mazes101/generators/wilson' ; board = generate ( board , { getNextRowNeighbours , removeInterWall }); Required Functions \u00b6 getNeighbours ( index : number , board : Board ) : number [] Get indexes of cells neighbour to the given index . This shouldn't include disabled cells. removeInterWall ( index1 : number , index2 : number , board : Board ) : Board Remove wall between given two cells index1 and index2 . The function should return a board with walls between both cells removed.","title":"Wilson"},{"location":"generators/wilson/#wilson","text":"Source Chooses an arbitrary cell and adds it to the maze. Starting from any other cell, performs a loop-erased random walk until encounters a cell belonging to the maze, and then adds the resulting walk. Repeats until all cells have been added.","title":"Wilson"},{"location":"generators/wilson/#typical-feature","text":"Slow to start but accelerates quickly as paths are added to the maze. As with Aldous-Broder, it is unbiased, meaning it is guaranteed to generate mazes perfectly randomly, without preference to any particular texture or feature.","title":"Typical Feature"},{"location":"generators/wilson/#usage","text":"import { generate } from 'mazes101/generators/wilson' ; board = generate ( board , { getNextRowNeighbours , removeInterWall });","title":"Usage"},{"location":"generators/wilson/#required-functions","text":"getNeighbours ( index : number , board : Board ) : number [] Get indexes of cells neighbour to the given index . This shouldn't include disabled cells. removeInterWall ( index1 : number , index2 : number , board : Board ) : Board Remove wall between given two cells index1 and index2 . The function should return a board with walls between both cells removed.","title":"Required Functions"},{"location":"renderers/","text":"Renderers \u00b6 A renderer is a function that takes a board and renders it to some other form (maybe to svg, canvas, image or string). Following are some renders built-in mazes101: Circular Board Circular SVG Rectangular Board Rectangular SVG References \u00b6 Each generator generally exports following two members: _supported_boards : string [] A list different kinds of board this renderer supports. render ( board : Board , options : Partial < RendererOptions > = {}) A function that takes a board and some optional options and splits out a rendered version of the provided board.","title":"Overview"},{"location":"renderers/#renderers","text":"A renderer is a function that takes a board and renders it to some other form (maybe to svg, canvas, image or string). Following are some renders built-in mazes101: Circular Board Circular SVG Rectangular Board Rectangular SVG","title":"Renderers"},{"location":"renderers/#references","text":"Each generator generally exports following two members: _supported_boards : string [] A list different kinds of board this renderer supports. render ( board : Board , options : Partial < RendererOptions > = {}) A function that takes a board and some optional options and splits out a rendered version of the provided board.","title":"References"},{"location":"renderers/circularSvg/","text":"Circular SVG Renderer \u00b6 Usage \u00b6 Circular SVG renderer outputs a svg when called with a circular board. import { render } from 'mazes101/renderers/circularSvg' ; let output = render ( board , options ); By default the output will be string which contains an svg. the out can be a DOM SVGElement or a react component based on the h parameter you pass to options. Options \u00b6 cellSize : number The size of a single cell. It is basically height of the cell, the width of the cell will vary based on the number of cells in a single ring and distance from center. Default : 30 lineWidth : number The width of wall line, it is shared between both cells Default : 2 Default : mazes101 . h . StrH paths : Record < number | string , number [] > An object that contains different paths to be rendered against their ids. A path is just an array of cell indexes. Default : {} colors : Record < number | string , string > An object that defined the colors to be used to fill paths against their ids. Default : {} h : ( tag : string , attributes : Record < string , string > , ... children : Array < any > ) => T A JSX factory function that will be used to construct the JSX. Read more here . Example \u00b6 { cellSize : 20 , lineWidth : 5 , paths : { 0 : [ 10 , 11 , 21 , 20 ]}, colors : { 0 : '#ccc' }, h : React.CreateElement , }","title":"Circular SVG"},{"location":"renderers/circularSvg/#circular-svg-renderer","text":"","title":"Circular SVG Renderer"},{"location":"renderers/circularSvg/#usage","text":"Circular SVG renderer outputs a svg when called with a circular board. import { render } from 'mazes101/renderers/circularSvg' ; let output = render ( board , options ); By default the output will be string which contains an svg. the out can be a DOM SVGElement or a react component based on the h parameter you pass to options.","title":"Usage"},{"location":"renderers/circularSvg/#options","text":"cellSize : number The size of a single cell. It is basically height of the cell, the width of the cell will vary based on the number of cells in a single ring and distance from center. Default : 30 lineWidth : number The width of wall line, it is shared between both cells Default : 2 Default : mazes101 . h . StrH paths : Record < number | string , number [] > An object that contains different paths to be rendered against their ids. A path is just an array of cell indexes. Default : {} colors : Record < number | string , string > An object that defined the colors to be used to fill paths against their ids. Default : {} h : ( tag : string , attributes : Record < string , string > , ... children : Array < any > ) => T A JSX factory function that will be used to construct the JSX. Read more here .","title":"Options"},{"location":"renderers/circularSvg/#example","text":"{ cellSize : 20 , lineWidth : 5 , paths : { 0 : [ 10 , 11 , 21 , 20 ]}, colors : { 0 : '#ccc' }, h : React.CreateElement , }","title":"Example"},{"location":"renderers/hfunction/","text":"h function \u00b6 h function is a JSX factory function that can be used to control output of the SVG renderers. By default mazes101 uses mazes101.h.StrH function that outputs string. Built-in h functions \u00b6 mazes101.h.StrH \u00b6 Source This function is the default function being used by the renderes. It renders the provided element in string. This is specially useful on serverside mazes generation or when you want to store it a SVG file. import * as Rectangular from 'mazes101/boards/rectangular' ; import { generate } from 'mazes101/generators/backtrack' ; import { render } from 'mazes101/renderers/rectangularSvg' ; import { StrH } from 'mazes101/h' ; let board = Rectangular . newBoard ({ height : 20 , width : 20 }); board = generate ( board , Rectangular ); const output = render ( board , { h : StrH }); // now output will be a strig // like: '<svg stroke=\"currentColor\" ...' mazes101.h.dom.DomH \u00b6 Source It renders the provided element as DOM SVGElement and thus requires document object to be globally available. This is specially useful on clientside where you want to directly append the maze to a document node. import * as Rectangular from 'mazes101/boards/rectangular' ; import { generate } from 'mazes101/generators/backtrack' ; import { render } from 'mazes101/renderers/rectangularSvg' ; import { DomH } from 'mazes101/h/dom' ; let board = Rectangular . newBoard ({ height : 20 , width : 20 }); board = generate ( board , Rectangular ); const output = render ( board , { h : DomH }); // now output will be a SVGElement // which you can easily append to any document node // like: let containerEl = document . querySelector ( '#MazeConatiner' ); containerEl . appendChild ( output ); Usage with Frameworks \u00b6 React \u00b6 In react you can simply use React.createElement as h function to get react component as output which you can directly put in some other react component. import React , { useEffect , useState } from 'react' import * as Rectangular from 'mazes101/boards/rectangular' ; import { generate } from 'mazes101/generators/backtrack' ; import { render } from 'mazes101/renderers/rectangularSvg' ; export default function Maze () { let [ board , setBoard ] = useState (); useEffect (() => { let board = Rectangular . newBoard ({ height : 20 , width : 20 }); board = generate ( board , Rectangular ); setBoard ( board ); }, []); return ( < div > { board && render ( board , { h : React . createElement })} < /div> ) }","title":"h function"},{"location":"renderers/hfunction/#h-function","text":"h function is a JSX factory function that can be used to control output of the SVG renderers. By default mazes101 uses mazes101.h.StrH function that outputs string.","title":"h function"},{"location":"renderers/hfunction/#built-in-h-functions","text":"","title":"Built-in h functions"},{"location":"renderers/hfunction/#mazes101hstrh","text":"Source This function is the default function being used by the renderes. It renders the provided element in string. This is specially useful on serverside mazes generation or when you want to store it a SVG file. import * as Rectangular from 'mazes101/boards/rectangular' ; import { generate } from 'mazes101/generators/backtrack' ; import { render } from 'mazes101/renderers/rectangularSvg' ; import { StrH } from 'mazes101/h' ; let board = Rectangular . newBoard ({ height : 20 , width : 20 }); board = generate ( board , Rectangular ); const output = render ( board , { h : StrH }); // now output will be a strig // like: '<svg stroke=\"currentColor\" ...'","title":"mazes101.h.StrH"},{"location":"renderers/hfunction/#mazes101hdomdomh","text":"Source It renders the provided element as DOM SVGElement and thus requires document object to be globally available. This is specially useful on clientside where you want to directly append the maze to a document node. import * as Rectangular from 'mazes101/boards/rectangular' ; import { generate } from 'mazes101/generators/backtrack' ; import { render } from 'mazes101/renderers/rectangularSvg' ; import { DomH } from 'mazes101/h/dom' ; let board = Rectangular . newBoard ({ height : 20 , width : 20 }); board = generate ( board , Rectangular ); const output = render ( board , { h : DomH }); // now output will be a SVGElement // which you can easily append to any document node // like: let containerEl = document . querySelector ( '#MazeConatiner' ); containerEl . appendChild ( output );","title":"mazes101.h.dom.DomH"},{"location":"renderers/hfunction/#usage-with-frameworks","text":"","title":"Usage with Frameworks"},{"location":"renderers/hfunction/#react","text":"In react you can simply use React.createElement as h function to get react component as output which you can directly put in some other react component. import React , { useEffect , useState } from 'react' import * as Rectangular from 'mazes101/boards/rectangular' ; import { generate } from 'mazes101/generators/backtrack' ; import { render } from 'mazes101/renderers/rectangularSvg' ; export default function Maze () { let [ board , setBoard ] = useState (); useEffect (() => { let board = Rectangular . newBoard ({ height : 20 , width : 20 }); board = generate ( board , Rectangular ); setBoard ( board ); }, []); return ( < div > { board && render ( board , { h : React . createElement })} < /div> ) }","title":"React"},{"location":"renderers/rectangularSvg/","text":"Rectangular SVG Renderer \u00b6 Usage \u00b6 Rectangular SVG renderer outputs a svg when called with a rectangular board. import { render } from 'mazes101/renderers/rectangularSvg' ; let output = render ( board , options ); By default the output will be string which contains an svg. the out can be a DOM SVGElement or a react component based on the h parameter you pass to options. Options \u00b6 cellSize : number The size of a single cell. Default : 30 lineWidth : number The width of wall line, it is shared between both cells Default : 2 Default : mazes101 . h . StrH paths : Record < number | string , number [] > An object that contains different paths to be rendered against their ids. A path is just an array of cell indexes. Default : {} colors : Record < number | string , string > An object that defined the colors to be used to fill paths against their ids. Default : {} h : ( tag : string , attributes : Record < string , string > , ... children : Array < any > ) => T A JSX factory function that will be used to construct the JSX. Read more here . Example \u00b6 { cellSize : 20 , lineWidth : 5 , paths : { 0 : [ 10 , 11 , 21 , 20 ]}, colors : { 0 : '#ccc' }, h : React.CreateElement , }","title":"Rectangular SVG"},{"location":"renderers/rectangularSvg/#rectangular-svg-renderer","text":"","title":"Rectangular SVG Renderer"},{"location":"renderers/rectangularSvg/#usage","text":"Rectangular SVG renderer outputs a svg when called with a rectangular board. import { render } from 'mazes101/renderers/rectangularSvg' ; let output = render ( board , options ); By default the output will be string which contains an svg. the out can be a DOM SVGElement or a react component based on the h parameter you pass to options.","title":"Usage"},{"location":"renderers/rectangularSvg/#options","text":"cellSize : number The size of a single cell. Default : 30 lineWidth : number The width of wall line, it is shared between both cells Default : 2 Default : mazes101 . h . StrH paths : Record < number | string , number [] > An object that contains different paths to be rendered against their ids. A path is just an array of cell indexes. Default : {} colors : Record < number | string , string > An object that defined the colors to be used to fill paths against their ids. Default : {} h : ( tag : string , attributes : Record < string , string > , ... children : Array < any > ) => T A JSX factory function that will be used to construct the JSX. Read more here .","title":"Options"},{"location":"renderers/rectangularSvg/#example","text":"{ cellSize : 20 , lineWidth : 5 , paths : { 0 : [ 10 , 11 , 21 , 20 ]}, colors : { 0 : '#ccc' }, h : React.CreateElement , }","title":"Example"},{"location":"renderers/weaveSvg/","text":"Weave SVG Renderer \u00b6 Usage \u00b6 Weave SVG renderer outputs a svg when called with a weave board. import { render } from 'mazes101/renderers/weaveSvg' ; let output = render ( board , options ); By default the output will be string which contains an svg. The output can be a DOM SVGElement or a react component based on the h parameter you pass to options. Options \u00b6 cellSize : number The size of a single cell. Default : 22 lineWidth : number The width of wall line, it is shared between both cells Default : 2 shouldFillPath : boolean The fill the path with some color. With a darker backgorund color and a filled path, visually it becomes much easier to follow the paths in weave mazes. Default : true paths : Record < number | string , number [] > An object that contains different paths to be rendered against their ids. A path is just an array of cell indexes. Default : {} colors : Record < number | string , string > An object that defined the colors to be used to fill paths against their ids. Default : { default : 'white' } h : ( tag : string , attributes : Record < string , string > , ... children : Array < any > ) => T A JSX factory function that will be used to construct the JSX. Read more here . Default : mazes101 . h . StrH Example \u00b6 { cellSize : 20 , lineWidth : 5 , shouldFillPath : true , paths : { 0 : [ 10 , 11 , 21 , 20 ]}, colors : { 0 : '#ccc' }, h : React.CreateElement , }","title":"Weave SVG"},{"location":"renderers/weaveSvg/#weave-svg-renderer","text":"","title":"Weave SVG Renderer"},{"location":"renderers/weaveSvg/#usage","text":"Weave SVG renderer outputs a svg when called with a weave board. import { render } from 'mazes101/renderers/weaveSvg' ; let output = render ( board , options ); By default the output will be string which contains an svg. The output can be a DOM SVGElement or a react component based on the h parameter you pass to options.","title":"Usage"},{"location":"renderers/weaveSvg/#options","text":"cellSize : number The size of a single cell. Default : 22 lineWidth : number The width of wall line, it is shared between both cells Default : 2 shouldFillPath : boolean The fill the path with some color. With a darker backgorund color and a filled path, visually it becomes much easier to follow the paths in weave mazes. Default : true paths : Record < number | string , number [] > An object that contains different paths to be rendered against their ids. A path is just an array of cell indexes. Default : {} colors : Record < number | string , string > An object that defined the colors to be used to fill paths against their ids. Default : { default : 'white' } h : ( tag : string , attributes : Record < string , string > , ... children : Array < any > ) => T A JSX factory function that will be used to construct the JSX. Read more here . Default : mazes101 . h . StrH","title":"Options"},{"location":"renderers/weaveSvg/#example","text":"{ cellSize : 20 , lineWidth : 5 , shouldFillPath : true , paths : { 0 : [ 10 , 11 , 21 , 20 ]}, colors : { 0 : '#ccc' }, h : React.CreateElement , }","title":"Example"}]}